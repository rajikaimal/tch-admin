// Code generated by MockGen. DO NOT EDIT.
// Source: repository/teacherrepo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rajikaimal/tch-admin/models"
)

// MockTRepo is a mock of TRepo interface.
type MockTRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTRepoMockRecorder
}

// MockTRepoMockRecorder is the mock recorder for MockTRepo.
type MockTRepoMockRecorder struct {
	mock *MockTRepo
}

// NewMockTRepo creates a new mock instance.
func NewMockTRepo(ctrl *gomock.Controller) *MockTRepo {
	mock := &MockTRepo{ctrl: ctrl}
	mock.recorder = &MockTRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTRepo) EXPECT() *MockTRepoMockRecorder {
	return m.recorder
}

// FindOneStudent mocks base method.
func (m *MockTRepo) FindOneStudent(email string, student *models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneStudent", email, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOneStudent indicates an expected call of FindOneStudent.
func (mr *MockTRepoMockRecorder) FindOneStudent(email, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneStudent", reflect.TypeOf((*MockTRepo)(nil).FindOneStudent), email, student)
}

// FindStudent mocks base method.
func (m *MockTRepo) FindStudent(fields []string, values []interface{}, students *[]models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStudent", fields, values, students)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindStudent indicates an expected call of FindStudent.
func (mr *MockTRepoMockRecorder) FindStudent(fields, values, students interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStudent", reflect.TypeOf((*MockTRepo)(nil).FindStudent), fields, values, students)
}

// FindStudentsForNotifications mocks base method.
func (m *MockTRepo) FindStudentsForNotifications(fields []string, values []interface{}, suspended bool, students *[]models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStudentsForNotifications", fields, values, suspended, students)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindStudentsForNotifications indicates an expected call of FindStudentsForNotifications.
func (mr *MockTRepoMockRecorder) FindStudentsForNotifications(fields, values, suspended, students interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStudentsForNotifications", reflect.TypeOf((*MockTRepo)(nil).FindStudentsForNotifications), fields, values, suspended, students)
}

// FindTeacher mocks base method.
func (m *MockTRepo) FindTeacher(email string, tch *models.Teacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTeacher", email, tch)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindTeacher indicates an expected call of FindTeacher.
func (mr *MockTRepoMockRecorder) FindTeacher(email, tch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTeacher", reflect.TypeOf((*MockTRepo)(nil).FindTeacher), email, tch)
}

// GetCommonStudents mocks base method.
func (m *MockTRepo) GetCommonStudents(fields []string, values []interface{}, students *[]models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommonStudents", fields, values, students)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCommonStudents indicates an expected call of GetCommonStudents.
func (mr *MockTRepoMockRecorder) GetCommonStudents(fields, values, students interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommonStudents", reflect.TypeOf((*MockTRepo)(nil).GetCommonStudents), fields, values, students)
}

// RegisterStudent mocks base method.
func (m *MockTRepo) RegisterStudent(tch *models.Teacher, stds *[]models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterStudent", tch, stds)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterStudent indicates an expected call of RegisterStudent.
func (mr *MockTRepoMockRecorder) RegisterStudent(tch, stds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStudent", reflect.TypeOf((*MockTRepo)(nil).RegisterStudent), tch, stds)
}

// RetrieveNotifications mocks base method.
func (m *MockTRepo) RetrieveNotifications(teacherEmail string, student *[]models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveNotifications", teacherEmail, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetrieveNotifications indicates an expected call of RetrieveNotifications.
func (mr *MockTRepoMockRecorder) RetrieveNotifications(teacherEmail, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveNotifications", reflect.TypeOf((*MockTRepo)(nil).RetrieveNotifications), teacherEmail, student)
}

// SuspendStudent mocks base method.
func (m *MockTRepo) SuspendStudent(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendStudent", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendStudent indicates an expected call of SuspendStudent.
func (mr *MockTRepoMockRecorder) SuspendStudent(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendStudent", reflect.TypeOf((*MockTRepo)(nil).SuspendStudent), email)
}
